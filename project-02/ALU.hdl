// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //f1 = conditional x zeroing
    Mux16(a= x, b= false, sel= zx, out= f1out);
    //f3 = conditional y zeroing
    Mux16(a= y, b= false, sel= zy, out= f3out);
    //f2 = conditional f1out negatio
    Not16(in= f1out, out= notf1out);
    Mux16(a= f1out, b= notf1out, sel= nx, out= f2out);
    //f4 = conditional f3out negation
    Not16(in= f3out, out= notf3out);
    Mux16(a= f3out, b= notf3out, sel= ny, out= f4out);
    //f5 = conditional (f2out,f4out) addition or moltiplication
    Add16(a = f2out, b = f4out, out = f5add);
    And16(a= f2out, b= f4out, out= f5and);
    Mux16(a= f5and, b= f5add, sel= f, out= f5out);
    //f6 = conditional f5out negation
    Not16(in= f5out, out= notf5out);
    Mux16(a= f5out, b= notf5out, sel= no, out[0..7]= f6AL, out[8..15]= f6AH, out[15] = bit, out=out);
    //f7 = set zr to 1 if f6out is 0
    Or8Way(in= f6AL, out= f7or1);
    Or8Way(in= f6AH, out= f7or2);
    Or(a= f7or1, b= f7or2, out= f7or3);
    Not(in= f7or3, out= zr);
    //f8 = set ng to 1 if f6out is negative
    Or(a= bit, b= false, out= ng);
    /*
    SEEEEEEE
    */
}