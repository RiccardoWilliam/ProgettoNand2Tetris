// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //program counter
    PC(in= Aout, load= C4, inc= true, reset= reset, out[0..14]= pc);

    //dest
    DRegister(in= ALUout, load= C5, out= Dout);
    ARegister(in= InstructionType, load= C2, out= Aout, out[0..14]= addressM);
    
    //seglie l'input per il registro A
    Mux16(a= ALUout, b= instruction, sel= C1, out= InstructionType);

    //seglie l'input per ALU tra il registro M e A
    Mux16(a= Aout, b= inM, sel= C3, out= Operand);

    //comp
    ALU(x= Dout, y= Operand, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ZR, ng=NG);

    //Bit di controllo
    //C1 - controlla se sia una A-instruction o una C-instruction
    Not(in= instruction[15], out= C1);
    //C2 - controlla se bisogna sovrascrivere il registro A
    And(a= instruction[15], b= instruction[5], out= d1);
    Or(a= C1, b= d1, out= C2);
    //C3 - controlla che gli input dell'ALU siano (D,A) o (D,M)
    And(a= instruction[15], b= instruction[12], out= C3);
    //C4 - controlla se sia selezionato un salto e che la condizione sia positiva
    Not(in= ZR, out= notZR); //Diverso da zero
    Not(in= NG, out= notNG); //Non negativo
    And(a= notZR, b= notNG, out= GT); //Maggiore di zero
    And(a= ZR, b= notNG, out= EQ); //Uguale a zero
    Or(a= notNG, b= ZR, out= GE); //Maggiore o uguale a zero
    And(a= NG, b= notZR, out= LT); //Minore di zero
    Or(a= NG, b= ZR, out= LE); //Minore o uguale a zero
    //Salti condizionali
    And(a= instruction[0], b= GT, out= JGT); //salta se maggiore di zero
    And(a= instruction[1], b= EQ, out= JEQ); //salta se uguale a zero
    And(a= instruction[2], b= LT, out= JLT); //salta se minore di zero
    And(a= instruction[1], b= instruction[0], out= j2andj3);
    And(a= j2andj3, b= GE, out= JGE); //salta se maggiore o uguale a zero
    And(a= instruction[2], b= instruction[0], out= j1andj3);
    And(a= j1andj3, b= notZR, out= JNE); //salta se diverso da zero
    And(a= instruction[2], b= instruction[1], out= j1andj2);
    And(a= j1andj2, b= LE, out= JLE); //salta se minore o uguale a zero
    And(a= j1andj2, b= instruction[0], out= JMP); //salto incondizionato

    Or(a= JGT, b= JGE, out= JumpsOR1);
    Or(a= JEQ, b= JNE, out= JumpsOR2);
    Or(a= JLT, b= JLE, out= JumpsOR3);
    Or(a= JumpsOR1, b= JumpsOR2, out= JumpsOR4);
    Or(a= JumpsOR3, b= JumpsOR4, out= JumpsOR5);
    Or(a= JumpsOR5, b= JMP, out= JumpEval);

    And(a= instruction[15], b= JumpEval, out= C4);

    //C5 - controlla se bisogna sovrascrivere il registro D
    And(a= instruction[15], b=instruction[4], out= C5);
    //C6 - controlla se bisogna sovrascrivere il registro M
    And(a= instruction[15], b= instruction[3], out= writeM); 
}